#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require("../app")
const cluster = require("cluster")
const { Worker } = require("worker_threads")
require("../startups");
let workers = []
let numCores = require("os").cpus().length

/**
 * Setup number of worker processes to share port which will be defined while setting up server
 */
const setupWorkerProcesses = () => {
    // to read number of cores on system
    console.log("Master cluster setting up " + numCores + " workers")

    // iterate on number of cores need to be utilized by an application
    // current example will utilize all of them
    for (let i = 0; i < numCores; i++) {
        // creating workers and pushing reference in an array
        // these references can be used to receive messages from workers
        workers.push(cluster.fork())

        // to receive messages from worker process
        workers[i].on("message", function (message) {
            console.log(message)
        })
    }

    // process is clustered on a core and process id is assigned
    cluster.on("online", function (worker) {
        console.log("Worker " + worker.process.pid + " is listening")
    })

    // if any of the worker process dies then start a new one by simply forking another one
    cluster.on("exit", function (worker, code, signal) {
        console.log(
            "Worker " +
            worker.process.pid +
            " died with code: " +
            code +
            ", and signal: " +
            signal
        )
        // console.log('Starting a new worker');
        cluster.fork()
        workers.push(cluster.fork())
        // to receive messages from worker process
        workers[workers.length - 1].on("message", (message) => {
            console.log(message)
        })
    })
}

const setupApp = async () => {
    /**
     *
     * Create HTTP server.
     */

    try {
        /**
         * Get port from environment.
         */
        const port = normalizePort(process.env.PORT || "3000")
        console.log("my port", port)
        /**
         * Listen on provided port, on all network interfaces.
         */
        await app.listen(port, "0.0.0.0")
        console.info(`server listening on ${port}`)
        console.log(`Starting up ${process.env.APP_NAME}`, port)
        console.log(`Worker ${process.pid} started`)
    } catch (err) {
        console.log("Error running app", err);
        process.exit(1)
    }
}

let createCustomWorkers = (worker = 1) => {
    for (let i = 0; i < worker; i++) {
        new Promise((resolve, reject) => {
            const worker = new Worker("./workers/BackgroundService.js")
            worker.on("message", resolve)
            worker.on("error", reject)
            worker.on("exit", (code) => {
                if (code !== 0)
                    return reject(new Error(`Worker stopped with exit code ${code}`))

                return createCustomWorkers()
            })
        })
            .then((res) => console.log(res))
            .catch((err) => console.log(err))
    }
}
/**
 * setup Server
 * @param isClusterRequired
 */
const setupServer = (isClusterRequired) => {
    //create in the master cluster another worker for the update of subscription
    // createCustomWorkers(
    //     process.env.NODE_ENV == "development" ? 1 : process.env.NO_OF_WORKERS || 10
    // )
    // if it is a master process then call setting up worker process
    if (isClusterRequired && cluster.isMaster) {
        setupWorkerProcesses()
    } else {
        // to setup server configurations and share port address for incoming requests
        setupApp().then(console.log).catch(console.log)
    }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
    if (error.syscall !== "listen") {
        throw error
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges")
            process.exit(1)
            break
        case "EADDRINUSE":
            console.error(bind + " is already in use")
            process.exit(1)
            break
        default:
            throw error
    }
}

//Digital only

if (process.env.NODE_ENV == "production") {
    if (numCores > 1) {
        setupServer(true)
    } else {
        setupServer(false)
    }
} else {
    setupServer(false)
}
